const Route = require('../models/Route');
const BusCompany = require('../models/BusCompany');
const mongoose = require('mongoose');
const Ticket = require('../models/Ticket');
const vehicleSeatsMap = {
    Limousine: 9,
    "Gh·∫ø ng·ªìi": 45,
    "Gi∆∞·ªùng n·∫±m": 40,
};


exports.getBookedSeats = async (req, res) => {
    try {
        // L·∫•y routeId t·ª´ request params
        const { routeId } = req.params;

        // Ki·ªÉm tra routeId c√≥ h·ª£p l·ªá kh√¥ng
        if (!mongoose.Types.ObjectId.isValid(routeId)) {
            return res.status(400).json({ error: 'Invalid route ID' });
        }

        // T√¨m t·∫•t c·∫£ v√© thu·ªôc v·ªÅ route n√†y
        const bookedTickets = await Ticket.find(
            { route: routeId }, // Ch·ªâ l·∫•y v√© ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t (status = 'booked')
            'seatNumber' // Ch·ªâ l·∫•y tr∆∞·ªùng seatNumber
        );

        // Tr√≠ch xu·∫•t danh s√°ch gh·∫ø ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t
        const bookedSeats = bookedTickets.map(ticket => ticket.seatNumber);

        // Tr·∫£ v·ªÅ danh s√°ch gh·∫ø ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t
        res.status(200).json({
            routeId,
            bookedSeats,
        });
    } catch (error) {
        console.error('Error fetching booked seats:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
};

// üìå T·∫°o tuy·∫øn ƒë∆∞·ªùng m·ªõi (c√≥ th√™m ·∫£nh)
exports.createRoute = async (req, res) => {
    try {
        const { companyId, startPoint, endPoint, stops, price, distance, duration, vehicleType, departureTimes, image } = req.body;

        // Ki·ªÉm tra th√¥ng tin ƒë·∫ßu v√†o
        if (!companyId || !startPoint || !endPoint || !price || !distance || !duration || !vehicleType || !departureTimes || !image) {
            return res.status(400).json({ message: "Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc!" });
        }

        // Ki·ªÉm tra xem c√¥ng ty c√≥ t·ªìn t·∫°i kh√¥ng
        const company = await BusCompany.findById(companyId);
        if (!company) {
            return res.status(404).json({ message: "C√¥ng ty kh√¥ng t·ªìn t·∫°i!" });
        }

        // Ki·ªÉm tra lo·∫°i xe h·ª£p l·ªá
        const normalizedVehicleType = Object.keys(vehicleSeatsMap).find(
            key => key.toLowerCase() === vehicleType.toLowerCase()
        );

        // Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa departureTimes (m·∫£ng c√°c th·ªùi gian kh·ªüi h√†nh)
        const validDepartureTimes = departureTimes.every(time => {
            const date = new Date(time);
            return !isNaN(date.getTime());
        });

        if (!validDepartureTimes) {
            return res.status(400).json({ message: "C√≥ th·ªùi gian kh·ªüi h√†nh kh√¥ng h·ª£p l·ªá!" });
        }

        // Ki·ªÉm tra URL ·∫£nh h·ª£p l·ªá
        if (!/^https?:\/\//.test(image)) {
            return res.status(400).json({ message: "URL ·∫£nh kh√¥ng h·ª£p l·ªá!" });
        }


        // T·∫°o tuy·∫øn ƒë∆∞·ªùng m·ªõi v·ªõi s·ªë gh·∫ø v√† th·ªùi gian kh·ªüi h√†nh
        const newRoute = new Route({
            company: companyId,
            startPoint,
            endPoint,
            stops: stops || [],
            price,
            distance,
            duration,
            vehicleType,
            departureTimes,
            availableSeats: vehicleSeatsMap[vehicleType],
            image, // Th√™m URL ·∫£nh
        });

        // L∆∞u tuy·∫øn ƒë∆∞·ªùng v√†o database
        await newRoute.save();

        // C·∫≠p nh·∫≠t danh s√°ch tuy·∫øn ƒë∆∞·ªùng c·ªßa c√¥ng ty
        company.routes.push(newRoute._id);
        await company.save();

        return res.status(201).json({ message: "Th√™m tuy·∫øn ƒë∆∞·ªùng th√†nh c√¥ng!", newRoute });
    } catch (error) {
        console.error("L·ªói t·∫°o tuy·∫øn:", error);
        res.status(500).json({ message: "L·ªói server!", error: error.message });
    }
};


// üìå L·∫•y danh s√°ch tuy·∫øn ƒë∆∞·ªùng
exports.getRoutes = async (req, res) => {
    try {
        const routes = await Route.find().populate({
            path: "company",
            select: "name contact address rating",
        }).populate({
            path: "tickets",
            select: "seatNumber"
        });

        return res.status(200).json({ message: "L·∫•y danh s√°ch tuy·∫øn ƒë∆∞·ªùng th√†nh c√¥ng!", routes });
    } catch (error) {
        console.error("L·ªói l·∫•y danh s√°ch tuy·∫øn:", error);
        res.status(500).json({ message: "L·ªói server!", error: error.message });
    }
};


// üìå T√¨m ki·∫øm tuy·∫øn ƒë∆∞·ªùng theo ƒëi·ªÉm ƒëi, ƒëi·ªÉm ƒë·∫øn, ng√†y kh·ªüi h√†nh
exports.searchRoutes = async (req, res) => {
    try {
        let { departure, destination, departureDate } = req.query;

        if (!departure && !destination) {
            return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p √≠t nh·∫•t ƒëi·ªÉm ƒëi ho·∫∑c ƒëi·ªÉm ƒë·∫øn!" });
        }

        const query = { $or: [] };

        if (departure && destination) {
            query.$or.push(
                { startPoint: { $regex: new RegExp(departure, "i") }, endPoint: { $regex: new RegExp(destination, "i") } },
                { startPoint: { $regex: new RegExp(destination, "i") }, endPoint: { $regex: new RegExp(departure, "i") } } // Kh·ª© h·ªìi
            );
        } else if (departure) {
            query.$or.push({ startPoint: { $regex: new RegExp(departure, "i") } });
        } else if (destination) {
            query.$or.push({ endPoint: { $regex: new RegExp(destination, "i") } });
        }

        if (departureDate) {
            const date = new Date(departureDate);
            if (!isNaN(date.getTime())) {
                query.departureTimes = { $gte: date };
            }
        }

        const routes = await Route.find(query).populate({
            path: "company",
            select: "name contact address rating"
        });

        if (routes.length === 0) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y tuy·∫øn ƒë∆∞·ªùng ph√π h·ª£p!" });
        }

        return res.status(200).json({ message: "T√¨m th·∫•y tuy·∫øn ƒë∆∞·ªùng!", routes });
    } catch (error) {
        console.error("L·ªói t√¨m ki·∫øm tuy·∫øn:", error);
        res.status(500).json({ message: "L·ªói server!", error: error.message });
    }

    exports.updateRoute = async (req, res) => {
        try {
            const { startPoint, endPoint, stops, price, distance, duration, vehicleType, departureTimes, image } = req.body;
            const routeId = req.params.id;
    
            const route = await Route.findById(routeId);
            if (!route) {
                return res.status(404).json({ message: "Tuy·∫øn ƒë∆∞·ªùng kh√¥ng t·ªìn t·∫°i!" });
            }
    
            if (vehicleType && !vehicleSeatsMap[vehicleType]) {
                return res.status(400).json({ message: "Lo·∫°i xe kh√¥ng h·ª£p l·ªá!" });
            }
    
            route.startPoint = startPoint || route.startPoint;
            route.endPoint = endPoint || route.endPoint;
            route.stops = Array.isArray(stops) ? stops : route.stops;
            route.price = price || route.price;
            route.distance = distance || route.distance;
            route.duration = duration || route.duration;
            route.vehicleType = vehicleType || route.vehicleType;
            route.departureTimes = departureTimes || route.departureTimes;
            route.image = image || route.image;
    
            await route.save();
    
            return res.status(200).json({ message: "C·∫≠p nh·∫≠t tuy·∫øn ƒë∆∞·ªùng th√†nh c√¥ng!", route });
        } catch (error) {
            console.error("L·ªói c·∫≠p nh·∫≠t tuy·∫øn:", error);
            res.status(500).json({ message: "L·ªói server!", error: error.message });
        }
    };
    
};
